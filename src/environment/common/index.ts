import * as symbolic from '../symbolic';
import { MathObj } from './math';

export const environment = new symbolic.SymbolicNamespace({
    decodeURI: symbolic.func(),
    decodeURIComponent: symbolic.func(),
    encodeURI: symbolic.func(),
    encodeURIComponent: symbolic.func(),
    eval: symbolic.func(),
    isFinite: symbolic.func(),
    isNaN: symbolic.func(),
    parseFloat: symbolic.func(),
    parseInt: symbolic.func(),

    Object: symbolic.value(),
    Function: symbolic.value(),
    Boolean: symbolic.value(),
    Symbol: symbolic.value(),
    Error: symbolic.value(),
    EvalError: symbolic.value(),
    InternalError: symbolic.value(),
    RangeError: symbolic.value(),
    ReferenceError: symbolic.value(),
    SyntaxError: symbolic.value(),
    TypeError: symbolic.value(),
    URIError: symbolic.value(),
    BigInt: symbolic.value(),
    Date: symbolic.value(),
    Math: MathObj,
    Number: symbolic.value(),
    String: symbolic.value(),
    RegExp: symbolic.value(),
    Array: symbolic.value(),
    BigInt64Array: symbolic.value(),
    BigUint64Array: symbolic.value(),
    Float32Array: symbolic.value(),
    Float64Array: symbolic.value(),
    Int8Array: symbolic.value(),
    Int16Array: symbolic.value(),
    Int32Array: symbolic.value(),
    Uint16Array: symbolic.value(),
    Uint32Array: symbolic.value(),
    Uint8Array: symbolic.value(),
    Uint8ClampedArray: symbolic.value(),
    Map: symbolic.value(),
    Set: symbolic.value(),
    WeakMap: symbolic.value(),
    WeakSet: symbolic.value(),
    ArrayBuffer: symbolic.value(),
    SharedArrayBuffer: symbolic.value(),
    Atomics: symbolic.value(),
    DataView: symbolic.value(),
    JSON: symbolic.value(),
    Promise: symbolic.value(),
    Generator: symbolic.value(),
    GeneratorFunction: symbolic.value(),
    AsyncFunction: symbolic.value(),
    AsyncGenerator: symbolic.value(),
    AsyncGeneratorFunction: symbolic.value(),
    Reflect: symbolic.value(),
    Proxy: symbolic.value(),
});
